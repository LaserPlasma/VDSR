# The input file here are all normalized, spatial coordinate is normalized by lambda_p (depend on f_Density_Normalize), time is normalized by lambda_pc^-1, electric field  m(omega_p)ce^-1
# For the Compton scattering, if one care about the scattered photon's polarization, then the laser should be only linearly polarized in x direction. Other wise polarization output is not correct, but totally radiation distribution is correct.
# z is usually the beam and laser propagation direction, x and y are transverse direction

&Domain
  i_Radiation_Calculation =1           # 0 Only beam trajectory calculation and output, 1 Calculate the radiation using classical method, 2 Calculate radiation using Compton Mento Carlo Method, 3 LBNL method
  i_Read_Trajectory = 0                 # 0 means not read trajectory, but calculate; 1 means read trajectory from the input file depending on the i_Code number
  l_Pnumber = 1                       # how many particles are used to represent the beam, if i_Read_Trajectory==1, then the particles will be read from an input file, and the number read equals the min(l_Pnumber,number exist in the file)
  l_OutputPTrajec = 10000                   # particle number step for output the particle's trajectory
  l_OutputBeamDis = 100000              # time step for beam distribution output
  i_Integration = 0                     # 0 using Taylor Expansion for integration, 1 using Fresnel Integration for integration  
  i_Code        = 1                     # 1 VLPL, 2 VORPAL, 3 reserved, only useful when i_Read_Trajectory=1, means particle is reading from files, X,Y,Z,VX,VY,VZ
  l_Step =200                          # dt*l_Step*v gives the total length of the trajectory, for undulator simulation, this also gives the length of the undulator: f_Undu_Length     
  l_Step_Cut1 = 4000                    # cut step of the trajectory from the beginning, only useful when i_Read_Trajectory=1
  l_Step_Cut2 = 5000                    # cut step of the trajectory from the end, only useful when i_Read_Trajectory=1
  f_Ts = 0.01                           # dt used in the trajectory calculation and used for the radiation integration, when VORPAL trajectory is read, this should be used, VLPL will automatically read from the history file
  f_MovingWindowt = 85.0                # only used when only useful when i_Read_Trajectory=1 and i_Code=1, this corresponding to the window moving time in the PIC simulation, add this to get correct z position of the particle
  i_OutputField = 0                     # 0: no output, 1: output field position changing with laser center 2: output position is fixed to be centered at (f_x0Output,f_y0Output,f_z0Output)
  l_OutputField = 100                 # time step for field output
  f_xLength     = 10.0                  # field output window size 
  f_yLength     = 0.0                   # field output window size 
  f_zLength     = 10.0                  # field output window size 
  f_x0Output    = 0.0                   #
  f_y0Output    = 0.0                   #
  f_z0Output    = 0.0                   #
  l_Field_Nx    = 120                   # bin number in the x direction
  l_Field_Ny    = 1                     # bin number in the y direction
  l_Field_Nz    = 600                   # bin number in the z direction
  i_OutputFieldEvolution = 0            # 1 output field temporal, 0 not output
  f_xPosition   = 0.01                  # for temporal field output 
  f_yPosition   = 0.0                   #
  f_zPosition   = 2001.0                #
  f_Amplify_Factor =1.0e0               # Amplify_Factor for compoton scattering should >0, which makes sure there are enough emitted photons to make the Mento Carlo sampling correctly satisfy the real distribution
  f_MaxScattering_Prob = 0.9999            # Maximum Scattering probability setted in the code, once p>f_MaxScattering_Prob, f_Amplify_Factor should be reduced
  i_CP_ParticleEnergyChange = 10         # change the scattered particle's energy?
/

&Controls
  f_CPUstop = 100.0                     #
 /

&ExternalFields
  f_Lambda_L = 1.0                       # unit in um, used for the calculation of the real unit, eV. For undulator simulation, this value should be the period length of the undulator  =Undul_Lambda; For laser pulse, it should be laser wavelength
  f_Density_Normalize =  1.0             # unit in critical density for the laser pulse, nc, when simulate laser or undulator, please set this value to be 1.0 since the normalized length depends on this value 
  f_Density_Plasma = 1.0                 #  plasma density normalized to f_Density_Normalize, only used when f_Density_Normalize=1.0, and also need the plasma density. such as both laser and plasma are used and at the same time length is normalized by laser wavelength
  i_Particle_Field = 16                  # 0: no field; 1: ion channel, need the plasma density; 2: bubble field; 3: Circular Laser; 4: Undulator, need f_Undu_B, f_Undu_Lambda, f_Undu_Length 5:Linear plane Laser 6:tightly focused long pulse and ion channel, 7: bubble and laser in channel from formula, 8: bubble and laser in channel vacuum from ax
  i_AzCalculation = 0                    # 1: az is approximately gotten, 0: az is gotten from integration of dax*dx^-1
  i_Radiation_Reaction = 0               # 0: not consider radiation reaction, 1: consider radiation reaction Sokolov, 2: Landau-Lifshitz Eq.
  f_ExternalField_End = 2.0e3            # the end position z of the external field, such as undulator or channel, plasma length, not the laser duration!!!
  f_ExternalField_Intensity = 100        # used for 3 and 5 of laser undulator, normalized laser vector potential   a=eA(mc2)^-1
  f_ExternalField_Duration = 30.0        # used for 3 and 5 of laser pulse duration, in length of Lambda_p, but for laser simulation Lambda_p=Lambda_L if ne=1.0nc
  f_Laser_Mode=     2                    # Laser mode, 2 usual Gaussian
  f_Laser_FocusW=     100.0              # focus spot size   a~exp(-r^2Laser_FocusW^-2)
  f_Laser_FocusX =    0.0                # laser focus position in lambda_p
  f_Laser_FocusY =    0.0                # laser focus position in lambda_p, here the code fixed the value to be Laser_FocusY =    0.0
  f_Laser_FocusZ =    0.0                # laser focus position in lambda_p
  f_Laser_Kx     = 0.0                   # laser wave vector kx
  f_Laser_Ky     = 0.0                   # laser wave vector ky, here ky=0, currently fixed in the code. so kx^2+kz^2=1.0
  f_Laser_Kz     = -1.0                   # laser wave vector kz, the code mainly read Kz, Kx will automatically calculated out, but using the sign of the Kx input here
  i_Laser_Polarization = 0               # 0 Ex linear, 1 Ey linear, 2 Circular polarized
  f_Laser_LtoFocus =  0.5                # distance between initial laser peak to focus, when in channel, this one means the initial laser center to (0,0,0)
  f_Laser_IniPhase = 1.5                 # in rad, initial laser phase, if before the focus, this value should be smaller than 0.0
  f_Gamma_wake = 10.0                    #
  f_r_bubble = 16                        # bubble center is initially at (0,0,0)
  f_Undu_B = 1.21                        # 4 The maximum magnetic field streng of the undulator, in the unit of m*omega_L*c*e^-1
  f_Undulator_a = 1.0                    # coefficient of the undulator field
  f_Undulator_b = 0.0                    # coefficient of the undulator field
  i_Particle_Trajectory = 0              # 0 calculation, initial v=0,rperp!=0, 1 theory but rperp!=0, 2 theory, but rperp=0
  i_DampingFlag = 0                      # only useful for Particle_Trajectory = 0
  f_BeginDampingTime = -5.0              # negative value means not damping here
  f_EndDampingTime = 1.0                 # trajectory damping time for the end part of the trajectory 
  f_Lambda_L2     = 0.8                  # unit in um
  f_ExternalField_Intensity_2 = 0.0         # used for 3 and 5 of laser undulator, normalized laser vector potential   a=eA(mc2)^-1
  f_ExternalField_Duration_2 = 31.81         # used for 3 and 5 of laser pulse duration, in length of Lambda_p, but for laser simulation Lambda_p=Lambda_L if ne=1.0nc
  f_Laser_Mode_2=     2                    # Laser mode, 2 usual Gaussian
  f_Laser_FocusW_2=     13.75                # focus spot size   a~exp(-r^2Laser_FocusW^-2)
  f_Laser_FocusX_2 =    0.0                # laser focus position in lambda_p
  f_Laser_FocusY_2 =    0.0                # laser focus position in lambda_p, here the code fixed the value to be Laser_FocusY =    0.0
  f_Laser_FocusZ_2 =    0.0                # laser focus position in lambda_p
  f_Laser_Kx_2     = -0.325568                   # laser wave vector kx
  f_Laser_Ky_2     = 0.0                   # laser wave vector ky, here ky=0, currently fixed in the code. so kx^2+kz^2=1.0
  f_Laser_Kz_2     = -0.945519                   # laser wave vector kz, the code mainly read Kz, Kx will automatically calculated out, but using the sign of the Kx input here
  i_Laser_Polarization_2 = 0               # 0 Ex linear, 1 Ey linear, 2 Circular polarized
  f_Laser_LtoFocus_2 =  -100.0                # distance between initial laser peak to focus, when in channel, this one means the initial laser center to (0,0,0)
  f_Laser_IniPhase_2 = 0.0                 # in rad, initial laser phase, if before the focus, this value should be smaller than 0.0  
/

&Detector
  f_Thetamin = 0.0                     # angle, from 0~180^o  unit in degree, not in rad
  f_Thetamax = 0.0                     #  =3.4mrad
  l_nThetabins = 1                       #
  f_Phimin = 0                         # azimuth, from 0~360^o unit in degree
  f_Phimax = 0                         #
  l_nPhibins = 1                         #
  f_Omegamin = 2.4e4                     # maximum detectable frequency, unit in omega_p
  f_Omegamax = 2.16e5                      # 
  l_nOmegabins = 2000                   #
  i_OmegaLog = 0                         # 1 means increase in Log, otherwise is linear
  i_RealDetector = 0                     # if 1, using following parameter define detector, otherwise using above
  f_Rdistance = 220                      # unit, any but should the same as f_Xlength and f_Ylength
  f_Xlength = 2.54                       # as long as unit as Rdistance
  f_Ylength = 0.635                      # as long as unit as Rdistance
  f_DCenterX = 0.0                       # as long as unit as Rdistance
  f_DCenterY= 0.0                        # as long as unit as Rdistance
  i_InitialEndIntegration = 1            # calculating the two end points integration?   step integration modification? 0 no, 1 yes
/

&Beam
  f_Qcharge = 1.0                         # unit in pC, this value is used in the current version code, so in the postprocess code, do not use the weight of the particle
  f_Energy = 20                          # m_ec^2  not used here  see Pz
  f_EnergySpread = 0.05                  # 0.01=1% not used here  see Pz, FWHM energy spread is 2.3548f_RadiusPz/f_CenterPz, when f_ShapePz=0, f_CenterPz is far larger than f_CenterPx,Py and 0
  f_RadiusX =  6.7e-3                       # unit in Lambda_P
  f_RadiusY =  0.0                       #
  f_RadiusZ =  45.0                       # 
  f_RadiusR =  6.7e-3                       # if RadiusR>0, then CenterR,ShapeR is used, and theta distribution is uniform between 0~2pi, X,Y distribution is not used, this is the rms beam radius when f_RadiusR larger than 0
  f_CenterX =  0.0                       # Lambda_P
  f_CenterY=   0.0                       #
  f_CenterZ=   0.0                       #60.0
  f_CenterR=   0.0                       #
  i_ShapeX =   2                         # Spatial distribution, 0 Gaussian exp[-x^2*(2*Radius^2)^-1], FWHM=2.3548Radius; 1 Square; 2 Same Value (CenterValue)for all particles; 3 Uniform, but random selection; 4 exponential distribution
  i_ShapeY =   2                         #
  i_ShapeZ =   2                         #
  i_ShapeR =   5                         #
  f_RadiusPX = 1.087                       # Lambda_P
  f_RadiusPY = 1.087                       #
  f_RadiusPZ = 25.368                     # 
  f_RadiusPR = 2                       #if f_RadiusPR>0, then CenterPR,ShapePR is used, and the electron will move in the radius direction, PX,PY will not be used
  f_CenterPX = 0.0                       # m_ec
  f_CenterPY = 0.0                       #           
  f_CenterPZ = 500                   #      10GeV electron
  f_CenterPR = 0.0                      #
  i_ShapePX =  0                         #
  i_ShapePY =  0                         #
  i_ShapePZ =  0                         # when ShapePz=4, the particle number should larger than 64, otherwise it cannot run
  i_ShapePR = 5                          #
  f_ExpTemp = 31.311                     # only used when ShapePz=4, unit in 0.511MeV
  f_Exp_min = 23.483                     # unit in mec
  f_Exp_max = 207.437                    # unit in mec
 /                  

  
